import { spring, useCurrentFrame, useVideoConfig } from "remotion";
import type { CSSProperties } from "react";
import { useDecodedText } from "../utils/htmlDecode";

type TitleTextProps = {
  titleText: string;
};

export const TitleText = ({ titleText }: TitleTextProps) => {
  const videoConfig = useVideoConfig();
  const frame = useCurrentFrame();

  // ðŸš€ FIX SPECIAL CHARACTERS: DÃ©coder les entitÃ©s HTML (&amp; â†’ &, etc.)
  const decodedTitle = useDecodedText(titleText);

  // ðŸš€ FIX LINE WRAPPING: Remplacer les tirets et ajouter des espaces autour des "/" pour permettre le retour Ã  la ligne
  const normalizedTitle = decodedTitle
    .replace(/-/g, " ") // Remplacer les tirets par des espaces
    .replace(/\//g, " / ") // Ajouter des espaces autour des slashes
    .replace(/\s+/g, " "); // Normaliser les espaces multiples en un seul espace
  const words = normalizedTitle.split(" ").filter((word) => word.trim() !== ""); // Filtrer les mots vides

  // ðŸš€ NOUVELLE ANIMATION: Slide-in global comme les Info
  const slideSpring = spring({
    fps: videoConfig.fps,
    frame: frame,
    config: {
      // ðŸš€ SMOOTH ANIMATIONS: Config spring plus smooth sans bounce
      damping: 15, // AugmentÃ© pour rÃ©duire le bounce
      mass: 1, // Valeur Ã©quilibrÃ©e pour un mouvement fluide
      stiffness: 80, // RÃ©duit pour une animation plus douce
    },
  });

  // Calcul du slide transform (mÃªme logique que Info.tsx)
  const slideX = -100 + 100 * slideSpring;
  const slideTransform = `translate3d(${slideX}%, 0, 0)`;

  // ðŸš€ SYNCHRONISATION AMÃ‰LIORÃ‰E: DÃ©lais plus courts et plus prÃ©visibles
  const springValues = words.map((_, i) => {
    const delay = i * 3; // RÃ©duit de 5 Ã  3 pour des animations plus rapides
    return spring({
      fps: videoConfig.fps,
      frame: frame - delay,
      config: {
        // ðŸš€ SMOOTH ANIMATIONS: Config spring plus smooth sans bounce pour les mots
        damping: 20, // AugmentÃ© pour un effet plus fluide
        mass: 1.2, // LÃ©gÃ¨rement plus lourd pour un mouvement plus Ã©lÃ©gant
        stiffness: 60, // RÃ©duit pour une animation plus douce
      },
    });
  });

  // ðŸš€ FIX LAYOUT SHIFT: Style du container pour rÃ©server l'espace complet
  const containerStyle: CSSProperties = {
    // RÃ©server l'espace complet pour Ã©viter le layout shift
    width: "100%",
    minHeight: "1em", // RÃ©serve la hauteur du texte
    display: "flex",
    flexWrap: "wrap",
    justifyContent: "center",
    alignItems: "center",
    gap: "0.625rem", // Ã‰quivalent Ã  mx-2.5 mais en gap
    // Optimisations de performance
    contain: "layout style",
    willChange: "transform, opacity",
    // ðŸš€ NOUVELLE ANIMATION: Slide-in transform
    transform: slideTransform,
    // Optimisations GPU pour l'animation de slide
    backfaceVisibility: "hidden",
    transformStyle: "preserve-3d",
  };

  // ðŸš€ FIX LAYOUT SHIFT: Style pour chaque mot
  const wordStyle: CSSProperties = {
    // ðŸš€ CRITICAL FIX: RÃ©server l'espace complet mÃªme quand invisible
    visibility: "visible", // Toujours visible pour le layout
    display: "inline-block",
    // ðŸš€ CRITICAL FIX: transform-origin centrÃ© pour Ã©viter les shifts
    transformOrigin: "center center",
    // Optimisations GPU
    backfaceVisibility: "hidden",
    willChange: "transform, opacity",
    // ðŸš€ FIX: Assurer que l'espace est toujours rÃ©servÃ©
    minWidth: "fit-content",
    textAlign: "center",
    // ðŸš€ FIX: Ã‰viter que le texte cause des reflows
    whiteSpace: "nowrap",
  };

  return (
    <h1 className="text-8xl w-full roboto-title" style={containerStyle}>
      {words.map((t, i) => {
        // ðŸš€ OPTIMISATION: Utiliser les springs prÃ©calculÃ©s
        const springValue = springValues[i];

        // ðŸš€ SYNCHRONISATION: Animation plus prÃ©visible avec scale minimal plus Ã©levÃ©
        const scale = 0.3 + 0.7 * springValue; // Va de 0.3 Ã  1.0 (au lieu de 0.1 Ã  1.0)
        const opacity = Math.max(0.1, springValue); // Opacity minimale pour Ã©viter la disparition complÃ¨te

        return (
          <span
            key={t}
            style={{
              ...wordStyle,
              // ðŸš€ SYNCHRONISATION: Transform plus visible et prÃ©visible
              transform: `scale(${scale})`,
              opacity: opacity,
            }}
          >
            {t}
          </span>
        );
      })}
    </h1>
  );
};
